dnl Process this file with autoconf to produce a configure script.

AC_INIT(ginac/basic.cpp)
AC_PREREQ(2.13)

dnl Configure options
AC_ARG_ENABLE(html-doc, [  --enable-html-doc       build HTML documentation [default=yes]], , enable_html_doc=yes)
AC_ARG_ENABLE(ps-doc,   [  --enable-ps-doc         build PostScript documentation [default=yes]], , enable_ps_doc=yes)
AC_ARG_WITH(cint, [  --with-cint             build GiNaC-cint C++ interpreter [default=no]], with_cint=no])

dnl GiNaC library version information
dnl
dnl Making releases:
dnl   GINACLIB_MICRO_VERSION += 1;
dnl   GINACLIB_INTERFACE_AGE += 1;
dnl   GINACLIB_BINARY_AGE += 1;
dnl if any functions have been added, set GINACLIB_INTERFACE_AGE to 0.
dnl if backwards compatibility has been broken,
dnl set GINACLIB_BINARY_AGE and GINACLIB_INTERFACE_AGE to 0.
dnl
dnl NOTE: these can't be renamed to GINAC_MAJOR_VERSION etc. because
dnl autoconf sees "AC_MAJOR_VERSION" and complains about an undefined macro
dnl (don't we all *love* M4?)...

GINACLIB_MAJOR_VERSION=0
GINACLIB_MINOR_VERSION=4
GINACLIB_MICRO_VERSION=1
GINACLIB_INTERFACE_AGE=0
GINACLIB_BINARY_AGE=1
GINACLIB_VERSION=$GINACLIB_MAJOR_VERSION.$GINACLIB_MINOR_VERSION.$GINACLIB_MICRO_VERSION

AC_SUBST(GINACLIB_MAJOR_VERSION)
AC_SUBST(GINACLIB_MINOR_VERSION)
AC_SUBST(GINACLIB_MICRO_VERSION)
AC_SUBST(GINACLIB_INTERFACE_AGE)
AC_SUBST(GINACLIB_BINARY_AGE)
AC_SUBST(GINACLIB_VERSION)

dnl GiNaC archive file version information
dnl
dnl If properties have been added, ARCHIVE_VERSION += 1.
dnl If backwards compatibility has been broken, ARCHIVE_AGE to 0.
dnl
dnl The version number in newly created archives will be ARCHIVE_VERSION.
dnl Archives version (ARCHIVE_VERSION-ARCHIVE_AGE) thru ARCHIVE_VERSION can
dnl be read by this version of the GiNaC library.

ARCHIVE_VERSION=0
ARCHIVE_AGE=0

AC_SUBST(ARCHIVE_VERSION)
AC_SUBST(ARCHIVE_AGE)
AC_DEFINE_UNQUOTED(ARCHIVE_VERSION, $ARCHIVE_VERSION)
AC_DEFINE_UNQUOTED(ARCHIVE_AGE, $ARCHIVE_AGE)

dnl libtool versioning
LT_RELEASE=$GINACLIB_MAJOR_VERSION.$GINACLIB_MINOR_VERSION
LT_CURRENT=`expr $GINACLIB_MICRO_VERSION - $GINACLIB_INTERFACE_AGE`
LT_REVISION=$GINACLIB_INTERFACE_AGE
LT_AGE=`expr $GINACLIB_BINARY_AGE - $GINACLIB_INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl This defines PACKAGE and VERSION
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE([GiNaC], $GINACLIB_VERSION)
AM_MAINTAINER_MODE

dnl ===========================================================================
dnl Check for the compiler and all the utilities needed for the build:
dnl ===========================================================================
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_INSTALL
AM_PROG_LIBTOOL
AM_PROG_LEX
AC_PROG_YACC

dnl Check for data types which are needed by the hash function (golden_ratio_hash)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)
AC_CHECK_SIZEOF(long double, 12)

dnl Switch to C++ language mode for the following libraries and headers:
AC_LANG_CPLUSPLUS

dnl Check for stuff needed for building the GiNaC interactive shell (ginsh):
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(readline/readline.h readline/history.h)
save_LIBS=$LIBS
AC_CHECK_LIB(readline, readline)
GINSH_LIBS=$LIBS
LIBS=$save_LIBS
AC_SUBST(GINSH_LIBS)

dnl Make sure the following libraries work by testing for symbols therein. 
dnl They are automatically added the the variable $LIBS and thus passed into
dnl the Makefile:
AC_CHECK_LIB(stdc++, cout)

dnl Make sure all the necessary new-style headers are installed on the system.
dnl If one of them cannot be found the system is probably not ANSI-conform
dnl enough so trying the .h-style headers is a waste of time.
AC_CHECK_HEADERS(iostream vector map string list typeinfo iterator strstream stdexcept algorithm, ,
    AC_MSG_ERROR(need to have ANSI compliant headers))

dnl We need to have Bruno Haible's CLN installed (macros are in acinclude.m4):
GINAC_CHECK_CLN_H
GINAC_CHECK_LIBCLN

dnl Expand the cppflags and libraries needed by apps using GiNaC
GINACLIB_CPPFLAGS=$CPPFLAGS
GINACLIB_LIBS=$LIBS
AC_SUBST(GINACLIB_CPPFLAGS)
AC_SUBST(GINACLIB_LIBS)

dnl Check for utilities needed by the different kinds of documentation.
dnl Documantation needs only be built when extending it, so never mind if it
dnl cannot find those helpers:
AC_PATH_PROG(DOXYGEN, doxygen, "")
AC_PATH_PROG(LATEX, latex, "")
AC_PATH_PROG(MAKEINDEX, makeindex, "")
AC_PATH_PROG(DVIPS, dvips, "")
AC_PATH_PROG(FIG2DEV, fig2dev, "")

dnl Determine which documentation shall be built
TUTORIAL_TARGETS=
REFERENCE_TARGETS=
if [[ "x$enable_html_doc" = "xyes" ]]; then
  TUTORIAL_TARGETS="$TUTORIAL_TARGETS ginac.html"
  if [[ "$DOXYGEN" ]]; then
    REFERENCE_TARGETS="$REFERENCE_TARGETS index.html"
  fi
fi
if [[ "x$enable_ps_doc" = "xyes" ]]; then
  TUTORIAL_TARGETS="$TUTORIAL_TARGETS ginac.ps"
  if [[ "$DOXYGEN" ]]; then
    REFERENCE_TARGETS="$REFERENCE_TARGETS reference.ps"
  fi
fi
AC_SUBST(TUTORIAL_TARGETS)
AC_SUBST(REFERENCE_TARGETS)

dnl Output makefiles etc.
AC_OUTPUT([
Makefile
GiNaC.spec
ginac-config
ginac/Makefile
check/Makefile
ginsh/Makefile
tools/Makefile
doc/Makefile
doc/tutorial/Makefile
doc/reference/Makefile
], [chmod +x ginac-config])
echo "Configuration done. Now type \"make\"."
